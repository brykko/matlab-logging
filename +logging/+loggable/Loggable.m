classdef Loggable < logging.loggable.ILoggable
    %LOGGABLE describes a loggable event and contains all information
    %necessary to generate the log string.
    %
    %A Loggable can be passed to a Logger, which will in turn pass it on to
    %all of its handlers.
    
    properties
        
        % ILOGGABLE IMPLEMENTATION
        level   % level of event, for filtering
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % INTERNAL PROPS
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        % These are required by the makeLogString method
        
        % MESSAGE - user-defined message string
        % 
        % This contains the formatted message generated from the
        % sprintf-style args passed to the constructor.
        message
        
        % SOURCE - event origin identifier string
        %
        % The log string contains a short string identifying the function,
        % class or object generating the event.
        source
        
        printStackTrace = false; % set to TRUE for handler to print stack trace
        
        % STACK - specify function call stack to be printed
        % 
        % If property "printStackTrace" is set to TRUE, this must contain a
        % call stack structure, as generated by the MATLAB builtin
        % "dbstack()"
        stack   
        
        % PRINTMESSAGEONLY - only show message in log string
        %
        % If set to TRUE, the log string will contain the message string
        % and no other information (level, date, source).
        printMessageOnly = false;
        
    end
    
    methods
        
        function self = Loggable(level, source, varargin)
            if nargin
                self.level = level;
                self.source = source;
                
                % Single string argument is treated as a literal; two or
                % more is interpreted sprintf-style 
                strArgs = varargin;
                if numel(strArgs) == 1
                    self.message = strArgs{1};
                else
                    self.message = sprintf(strArgs{:});
                end
            end
        end
        
        % Implement the ILoggable abstract method
        function logStr = makeLogString(self, newLineChars)
            
            nl = newLineChars;
            
            % Generate the basic log string, with format:
            % <TIME> : <LEVEL> : <OBJ IDENTIFIER> : <MESSAGE>
            
            levelStr    = logging.Level.getShortName(self.level);
            timeStr     = datestr(now, 'HH:MM:SS.FFF');
            messageStr  = self.message;
            sourceStr   = self.source;
            
            if self.printMessageOnly
                logStr = messageStr;
            else
                
                substrings = {timeStr, levelStr, sourceStr, messageStr};
                substringLengths = [14 5 30 0];
                overflowModes = {'none', 'none', 'trim', 'fit'};
                
                logStr = logging.helpers.buildPaddedString( ...
                    substrings, ...
                    substringLengths, ...
                    overflowModes);
            end
            
            if self.printStackTrace
                % Generate the stack trace string and append it to the
                % basic log string
                stackTraceStr = logging.helpers.buildStackTraceString(self.stack, nl);
                logStr = [logStr nl nl stackTraceStr nl];
            end
            
        end
        
    end
    
end

